@using LiftTracker.Client.Services
@using LiftTracker.Client.Components
@inherits LayoutView
@inject AuthService AuthService

<div class="h-screen bg-gray-50 overflow-hidden">
    @if (AuthService.IsAuthenticated)
    {
        <!-- Authenticated Layout -->
        <div class="flex h-full">
            <!-- Navigation Component -->
            <Navigation />

            <!-- Main Content Area -->
            <div class="flex-1 flex flex-col lg:ml-64">
                <!-- Mobile Header Space -->
                <div class="lg:hidden h-16"></div>

                <!-- Main Content -->
                <main class="flex-1 overflow-y-auto focus:outline-none">
                    <div class="py-6">
                        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                            @Body
                        </div>
                    </div>
                </main>
            </div>
        </div>

        <!-- Toast Notifications -->
        <div class="fixed bottom-0 right-0 z-50 p-6 space-y-4">
            @if (notifications.Any())
            {
                @foreach (var notification in notifications.Values)
                {
                    <div class="@GetNotificationClass(notification) max-w-sm w-full shadow-lg rounded-lg pointer-events-auto ring-1 ring-black ring-opacity-5 overflow-hidden">
                        <div class="p-4">
                            <div class="flex items-start">
                                <div class="flex-shrink-0">
                                    @if (GetNotificationType(notification) == "success")
                                    {
                                        <svg class="h-6 w-6 text-green-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                        </svg>
                                    }
                                    else if (GetNotificationType(notification) == "error")
                                    {
                                        <svg class="h-6 w-6 text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                        </svg>
                                    }
                                    else if (GetNotificationType(notification) == "warning")
                                    {
                                        <svg class="h-6 w-6 text-yellow-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
                                        </svg>
                                    }
                                    else
                                    {
                                        <svg class="h-6 w-6 text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                        </svg>
                                    }
                                </div>
                                <div class="ml-3 w-0 flex-1 pt-0.5">
                                    <p class="text-sm font-medium text-gray-900">
                                        @GetNotificationMessage(notification)
                                    </p>
                                </div>
                                <div class="ml-4 flex-shrink-0 flex">
                                    <button @onclick="() => DismissNotification(GetNotificationId(notification))"
                                            class="bg-white rounded-md inline-flex text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                        <span class="sr-only">Close</span>
                                        <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                            <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                                        </svg>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    }
    else
    {
        <!-- Unauthenticated Layout -->
        <div class="min-h-screen flex flex-col justify-center py-12 sm:px-6 lg:px-8 bg-gray-50">
            <div class="sm:mx-auto sm:w-full sm:max-w-md">
                <div class="text-center">
                    <h1 class="text-3xl font-bold text-indigo-600 mb-8">LiftTracker</h1>
                </div>

                <div class="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
                    @Body
                </div>

                <div class="mt-6 text-center">
                    <p class="text-sm text-gray-500">
                        Track your strength training progress with precision and ease.
                    </p>
                </div>
            </div>
        </div>
    }

    <!-- Loading Overlay -->
    @if (isGlobalLoading)
    {
        <div class="fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center z-50">
            <div class="bg-white rounded-lg p-6 flex items-center space-x-3">
                <svg class="animate-spin h-5 w-5 text-indigo-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                <span class="text-gray-700">@loadingMessage</span>
            </div>
        </div>
    }
</div>

@code {
    private Dictionary<string, object> notifications = new();
    private bool isGlobalLoading = false;
    private string loadingMessage = "Loading...";

    protected override void OnInitialized()
    {
        AuthService.AuthenticationStateChanged += OnAuthenticationChanged;

        // Subscribe to global loading events if StateService has them
        // StateService.LoadingChanged += OnLoadingChanged;

        // Subscribe to notifications if StateService has them
        // StateService.NotificationAdded += OnNotificationAdded;
    }

    private void OnAuthenticationChanged(bool isAuthenticated)
    {
        StateHasChanged();
    }

    // Placeholder methods for notifications - would need to be implemented in StateService
    private string GetNotificationClass(object notification)
    {
        return "bg-white";
    }

    private string GetNotificationType(object notification)
    {
        return "info";
    }

    private string GetNotificationMessage(object notification)
    {
        return notification.ToString() ?? "Notification";
    }

    private string GetNotificationId(object notification)
    {
        return Guid.NewGuid().ToString();
    }

    private void DismissNotification(string id)
    {
        if (notifications.ContainsKey(id))
        {
            notifications.Remove(id);
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        AuthService.AuthenticationStateChanged -= OnAuthenticationChanged;
    }
}
