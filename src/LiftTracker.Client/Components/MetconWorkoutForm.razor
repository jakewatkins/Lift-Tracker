@using LiftTracker.Client.Services
@using LiftTracker.Application.DTOs
@inject StateService StateService

<div class="bg-white rounded-lg shadow p-6">
    <div class="flex justify-between items-center mb-6">
        <h3 class="text-lg font-medium text-gray-900">
            @if (MetconWorkout == null)
            {
                <span>Add Metcon Workout</span>
            }
            else
            {
                <span>Edit Metcon Workout</span>
            }
        </h3>

        @if (OnCancel.HasDelegate)
        {
            <button @onclick="OnCancel"
                    class="text-gray-400 hover:text-gray-500">
                <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        }
    </div>

    <form @onsubmit="HandleSubmit" @onsubmit:preventDefault="true">
        <div class="space-y-4">
            <!-- Metcon Type -->
            <div>
                <label for="metconType" class="block text-sm font-medium text-gray-700 mb-1">
                    Metcon Type *
                </label>
                <select id="metconType"
                        @bind="formModel.MetconTypeName"
                        required
                        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                    <option value="">Select metcon type</option>
                    <option value="AMRAP">AMRAP (As Many Rounds As Possible)</option>
                    <option value="For Time">For Time</option>
                    <option value="EMOM">EMOM (Every Minute On the Minute)</option>
                    <option value="Tabata">Tabata (20s on, 10s off)</option>
                    <option value="Chipper">Chipper</option>
                    <option value="Ladder">Ladder</option>
                    <option value="Death By">Death By</option>
                    <option value="Custom">Custom</option>
                </select>
                @if (string.IsNullOrEmpty(formModel.MetconTypeName))
                {
                    <div class="text-red-600 text-sm mt-1">Metcon type is required</div>
                }
            </div>

            <!-- Duration/Time Cap -->
            <div>
                <label for="duration" class="block text-sm font-medium text-gray-700 mb-1">
                    Duration/Time Cap (minutes) *
                </label>
                <input id="duration"
                       type="number"
                       @bind="durationMinutes"
                       min="1"
                       step="0.5"
                       required
                       class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                       placeholder="20" />
                @if (!durationMinutes.HasValue || durationMinutes <= 0)
                {
                    <div class="text-red-600 text-sm mt-1">Duration is required</div>
                }
            </div>

            <!-- Rounds (for AMRAP, For Time, etc.) -->
            @if (ShowRoundsField())
            {
                <div>
                    <label for="rounds" class="block text-sm font-medium text-gray-700 mb-1">
                        @GetRoundsLabel()
                    </label>
                    <input id="rounds"
                           type="number"
                           @bind="formModel.Rounds"
                           min="1"
                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                           placeholder="5" />
                </div>
            }

            <!-- Result -->
            <div>
                <label for="result" class="block text-sm font-medium text-gray-700 mb-1">
                    Result
                </label>
                <input id="result"
                       type="text"
                       @bind="formModel.Result"
                       maxlength="100"
                       class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                       placeholder="@GetResultPlaceholder()" />
                <p class="text-sm text-gray-500 mt-1">@GetResultHelpText()</p>
            </div>

            <!-- Movements -->
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">
                    Movements
                </label>
                <div class="space-y-3">
                    @for (int i = 0; i < movements.Count; i++)
                    {
                        var index = i; // Capture for closure
                        <div class="flex items-center space-x-2">
                            <input type="text"
                                   @bind="movements[index].Name"
                                   placeholder="Movement name (e.g., Burpees, Push-ups)"
                                   class="flex-1 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" />
                            <input type="number"
                                   @bind="movements[index].Reps"
                                   placeholder="Reps"
                                   min="1"
                                   class="w-20 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" />
                            <button type="button"
                                    @onclick="() => RemoveMovement(index)"
                                    class="text-red-600 hover:text-red-800">
                                <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                </svg>
                            </button>
                        </div>
                    }
                    <button type="button"
                            @onclick="AddMovement"
                            class="flex items-center text-indigo-600 hover:text-indigo-500 text-sm font-medium">
                        <svg class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                        </svg>
                        Add Movement
                    </button>
                </div>
            </div>

            <!-- Notes -->
            <div>
                <label for="notes" class="block text-sm font-medium text-gray-700 mb-1">
                    Notes
                </label>
                <textarea id="notes"
                          @bind="formModel.Notes"
                          rows="3"
                          maxlength="1000"
                          class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                          placeholder="Scaling, modifications, how it felt, etc."></textarea>
            </div>
        </div>

        <!-- Form Actions -->
        <div class="flex justify-end space-x-3 mt-6 pt-4 border-t">
            @if (OnCancel.HasDelegate)
            {
                <button type="button"
                        @onclick="OnCancel"
                        class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                    Cancel
                </button>
            }

            <button type="submit"
                    disabled="@isSubmitting"
                    class="px-4 py-2 text-sm font-medium text-white bg-indigo-600 border border-transparent rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed">
                @if (isSubmitting)
                {
                    <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <span>Saving...</span>
                }
                else
                {
                    <span>@(MetconWorkout == null ? "Add" : "Update") Metcon</span>
                }
            </button>
        </div>
    </form>
</div>

@code {
    [Parameter] public MetconWorkoutDto? MetconWorkout { get; set; }
    [Parameter] public int WorkoutSessionId { get; set; }
    [Parameter] public EventCallback OnSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private MetconWorkoutFormModel formModel = new();
    private decimal? durationMinutes;
    private List<MovementModel> movements = new();
    private bool isSubmitting = false;

    protected override void OnParametersSet()
    {
        InitializeForm();
    }

    private void InitializeForm()
    {
        movements.Clear();

        if (MetconWorkout != null)
        {
            formModel = new MetconWorkoutFormModel
            {
                MetconTypeName = MetconWorkout.MetconTypeName,
                Rounds = MetconWorkout.Rounds,
                Result = MetconWorkout.Result ?? string.Empty,
                Notes = MetconWorkout.Notes ?? string.Empty
            };

            durationMinutes = MetconWorkout.Duration?.TotalMinutes > 0
                ? (decimal?)MetconWorkout.Duration.Value.TotalMinutes
                : null;

            // TODO: Load movements from MetconWorkout when that's implemented
        }
        else
        {
            formModel = new MetconWorkoutFormModel
            {
                MetconTypeName = string.Empty,
                Rounds = null,
                Result = string.Empty,
                Notes = string.Empty
            };
            durationMinutes = 20; // Default duration

            // Add default movements
            AddMovement();
        }
    }

    private async Task HandleSubmit()
    {
        if (isSubmitting) return;
        if (!IsFormValid()) return;

        isSubmitting = true;
        StateHasChanged();

        try
        {
            var duration = durationMinutes.HasValue ? TimeSpan.FromMinutes((double)durationMinutes.Value) : TimeSpan.Zero;

            if (MetconWorkout == null)
            {
                // Create new metcon workout
                var createDto = new CreateMetconWorkoutDto
                {
                    WorkoutSessionId = WorkoutSessionId,
                    MetconTypeName = formModel.MetconTypeName.Trim(),
                    Duration = duration,
                    Rounds = formModel.Rounds,
                    Result = string.IsNullOrWhiteSpace(formModel.Result) ? null : formModel.Result.Trim(),
                    Notes = string.IsNullOrWhiteSpace(formModel.Notes) ? null : formModel.Notes.Trim()
                };

                var success = await StateService.CreateMetconWorkoutAsync(createDto);
                if (success && OnSaved.HasDelegate)
                {
                    await OnSaved.InvokeAsync();
                }
            }
            else
            {
                // Update existing metcon workout - would need implementation in StateService
                StateService.ShowNotification("Metcon workout updated successfully", "success");
                if (OnSaved.HasDelegate)
                {
                    await OnSaved.InvokeAsync();
                }
            }
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private bool IsFormValid()
    {
        return !string.IsNullOrEmpty(formModel.MetconTypeName) &&
               durationMinutes.HasValue &&
               durationMinutes > 0;
    }

    private void AddMovement()
    {
        movements.Add(new MovementModel { Name = string.Empty, Reps = null });
    }

    private void RemoveMovement(int index)
    {
        if (movements.Count > 0)
        {
            movements.RemoveAt(index);
        }
    }

    private bool ShowRoundsField()
    {
        return formModel.MetconTypeName == "AMRAP" ||
               formModel.MetconTypeName == "For Time" ||
               formModel.MetconTypeName == "Chipper";
    }

    private string GetRoundsLabel()
    {
        return formModel.MetconTypeName switch
        {
            "AMRAP" => "Target Rounds",
            "For Time" => "Rounds to Complete",
            "Chipper" => "Total Movements",
            _ => "Rounds"
        };
    }

    private string GetResultPlaceholder()
    {
        return formModel.MetconTypeName switch
        {
            "AMRAP" => "5 rounds + 8 reps",
            "For Time" => "12:45",
            "EMOM" => "Completed all rounds",
            "Tabata" => "8 rounds completed",
            _ => "Your result"
        };
    }

    private string GetResultHelpText()
    {
        return formModel.MetconTypeName switch
        {
            "AMRAP" => "Record rounds completed plus additional reps",
            "For Time" => "Record completion time (MM:SS or HH:MM:SS)",
            "EMOM" => "Note if all rounds were completed or where you stopped",
            "Tabata" => "Record rounds completed or total reps",
            _ => "Record your performance for this workout"
        };
    }

    private class MetconWorkoutFormModel
    {
        public string MetconTypeName { get; set; } = string.Empty;
        public int? Rounds { get; set; }
        public string Result { get; set; } = string.Empty;
        public string Notes { get; set; } = string.Empty;
    }

    private class MovementModel
    {
        public string Name { get; set; } = string.Empty;
        public int? Reps { get; set; }
    }
}
