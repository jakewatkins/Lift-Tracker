@using LiftTracker.Client.Services
@using LiftTracker.Application.DTOs
@inject StateService StateService

<div class="bg-white rounded-lg shadow p-6">
    <div class="flex justify-between items-center mb-6">
        <h3 class="text-lg font-medium text-gray-900">
            @if (WorkoutSession == null)
            {
                <span>New Workout Session</span>
            }
            else
            {
                <span>Edit Workout Session</span>
            }
        </h3>

        @if (OnCancel.HasDelegate)
        {
            <button @onclick="OnCancel"
                    class="text-gray-400 hover:text-gray-500">
                <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        }
    </div>

    <EditForm Model="formModel" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />

        <div class="space-y-4">
            <!-- Name Field -->
            <div>
                <label for="name" class="block text-sm font-medium text-gray-700 mb-1">
                    Workout Name *
                </label>
                <InputText id="name"
                          @bind-Value="formModel.Name"
                          class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                          placeholder="e.g., Upper Body Strength, CrossFit WOD" />
                <ValidationMessage For="() => formModel.Name" class="text-red-600 text-sm mt-1" />
            </div>

            <!-- Date Field -->
            <div>
                <label for="date" class="block text-sm font-medium text-gray-700 mb-1">
                    Date *
                </label>
                <InputDate id="date"
                          @bind-Value="formModel.Date"
                          class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" />
                <ValidationMessage For="() => formModel.Date" class="text-red-600 text-sm mt-1" />
            </div>

            <!-- Duration Field -->
            <div>
                <label for="duration" class="block text-sm font-medium text-gray-700 mb-1">
                    Duration (minutes)
                </label>
                <InputNumber id="duration"
                            @bind-Value="durationMinutes"
                            class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                            placeholder="60" />
                <ValidationMessage For="() => durationMinutes" class="text-red-600 text-sm mt-1" />
            </div>

            <!-- Notes Field -->
            <div>
                <label for="notes" class="block text-sm font-medium text-gray-700 mb-1">
                    Notes
                </label>
                <InputTextArea id="notes"
                              @bind-Value="formModel.Notes"
                              rows="3"
                              class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                              placeholder="Any additional notes about this workout..." />
                <ValidationMessage For="() => formModel.Notes" class="text-red-600 text-sm mt-1" />
            </div>
        </div>

        <!-- Form Actions -->
        <div class="flex justify-end space-x-3 mt-6 pt-4 border-t">
            @if (OnCancel.HasDelegate)
            {
                <button type="button"
                        @onclick="OnCancel"
                        class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                    Cancel
                </button>
            }

            <button type="submit"
                    disabled="@isSubmitting"
                    class="px-4 py-2 text-sm font-medium text-white bg-indigo-600 border border-transparent rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed">
                @if (isSubmitting)
                {
                    <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <span>Saving...</span>
                }
                else
                {
                    <span>@(WorkoutSession == null ? "Create" : "Update") Workout</span>
                }
            </button>
        </div>
    </EditForm>
</div>

@code {
    [Parameter] public WorkoutSessionDto? WorkoutSession { get; set; }
    [Parameter] public EventCallback OnSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private WorkoutSessionFormModel formModel = new();
    private int? durationMinutes;
    private bool isSubmitting = false;

    protected override void OnParametersSet()
    {
        InitializeForm();
    }

    private void InitializeForm()
    {
        if (WorkoutSession != null)
        {
            formModel = new WorkoutSessionFormModel
            {
                Name = WorkoutSession.Name,
                Date = WorkoutSession.Date,
                Notes = WorkoutSession.Notes ?? string.Empty
            };

            durationMinutes = WorkoutSession.Duration?.TotalMinutes > 0
                ? (int?)WorkoutSession.Duration.Value.TotalMinutes
                : null;
        }
        else
        {
            formModel = new WorkoutSessionFormModel
            {
                Name = $"Workout {DateTime.Now:MMM dd, yyyy}",
                Date = DateTime.Now,
                Notes = string.Empty
            };
            durationMinutes = null;
        }
    }

    private async Task HandleSubmit()
    {
        if (isSubmitting) return;

        isSubmitting = true;
        StateHasChanged();

        try
        {
            var duration = durationMinutes.HasValue ? TimeSpan.FromMinutes(durationMinutes.Value) : (TimeSpan?)null;

            if (WorkoutSession == null)
            {
                // Create new workout session
                var createDto = new CreateWorkoutSessionDto
                {
                    Name = formModel.Name.Trim(),
                    Date = formModel.Date,
                    Duration = duration,
                    Notes = string.IsNullOrWhiteSpace(formModel.Notes) ? null : formModel.Notes.Trim()
                };

                var success = await StateService.CreateWorkoutSessionAsync(createDto);
                if (success && OnSaved.HasDelegate)
                {
                    await OnSaved.InvokeAsync();
                }
            }
            else
            {
                // Update existing workout session
                var updateDto = new UpdateWorkoutSessionDto
                {
                    Name = formModel.Name.Trim(),
                    Date = formModel.Date,
                    Duration = duration,
                    Notes = string.IsNullOrWhiteSpace(formModel.Notes) ? null : formModel.Notes.Trim()
                };

                var success = await StateService.UpdateWorkoutSessionAsync(WorkoutSession.Id, updateDto);
                if (success && OnSaved.HasDelegate)
                {
                    await OnSaved.InvokeAsync();
                }
            }
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private class WorkoutSessionFormModel
    {
        [Required(ErrorMessage = "Workout name is required")]
        [StringLength(200, ErrorMessage = "Workout name cannot exceed 200 characters")]
        public string Name { get; set; } = string.Empty;

        [Required(ErrorMessage = "Date is required")]
        public DateTime Date { get; set; } = DateTime.Now;

        [StringLength(1000, ErrorMessage = "Notes cannot exceed 1000 characters")]
        public string Notes { get; set; } = string.Empty;
    }
}
