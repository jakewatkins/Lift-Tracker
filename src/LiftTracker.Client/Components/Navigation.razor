@using LiftTracker.Client.Services
@inject StateService StateService
@inject NavigationManager NavigationManager
@inject AuthService AuthService

<!-- Mobile Navigation -->
<nav class="bg-white shadow-sm border-b lg:hidden">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between h-16">
            <div class="flex items-center">
                <!-- Logo -->
                <div class="flex-shrink-0 flex items-center">
                    <button @onclick="() => NavigateTo('/')" class="text-xl font-bold text-indigo-600 hover:text-indigo-500">
                        LiftTracker
                    </button>
                </div>
            </div>

            <!-- Mobile menu button -->
            <div class="flex items-center lg:hidden">
                <button @onclick="ToggleMobileMenu"
                        class="inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-indigo-500">
                    <span class="sr-only">Open main menu</span>
                    @if (!isMobileMenuOpen)
                    {
                        <!-- Menu icon -->
                        <svg class="block h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                        </svg>
                    }
                    else
                    {
                        <!-- Close icon -->
                        <svg class="block h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    }
                </button>
            </div>
        </div>
    </div>

    <!-- Mobile menu -->
    @if (isMobileMenuOpen)
    {
        <div class="lg:hidden">
            <div class="pt-2 pb-3 space-y-1">
                @foreach (var item in GetNavigationItems())
                {
                    <button @onclick="() => NavigateAndClose(item.Href)"
                            class="@GetMobileNavItemClass(item.Href) block px-3 py-2 text-base font-medium w-full text-left">
                        <div class="flex items-center">
                            @((MarkupString)item.Icon)
                            <span class="ml-3">@item.Title</span>
                        </div>
                    </button>
                }
            </div>

            <!-- User section -->
            <div class="pt-4 pb-3 border-t border-gray-200">
                @if (AuthService.IsAuthenticated)
                {
                    <div class="flex items-center px-4">
                        <div class="flex-shrink-0">
                            <div class="h-8 w-8 rounded-full bg-indigo-100 flex items-center justify-center">
                                <span class="text-sm font-medium text-indigo-600">
                                    @GetUserInitials()
                                </span>
                            </div>
                        </div>
                        <div class="ml-3">
                            <div class="text-base font-medium text-gray-800">@StateService.CurrentUser?.Name</div>
                            <div class="text-sm font-medium text-gray-500">@StateService.CurrentUser?.Email</div>
                        </div>
                    </div>
                    <div class="mt-3 space-y-1">
                        <button @onclick="HandleLogout"
                                class="block px-4 py-2 text-base font-medium text-gray-500 hover:text-gray-800 hover:bg-gray-100 w-full text-left">
                            Sign out
                        </button>
                    </div>
                }
            </div>
        </div>
    }
</nav>

<!-- Desktop Sidebar Navigation -->
<div class="hidden lg:flex lg:w-64 lg:flex-col lg:fixed lg:inset-y-0">
    <div class="flex-1 flex flex-col min-h-0 bg-white border-r border-gray-200">
        <!-- Logo -->
        <div class="flex items-center h-16 flex-shrink-0 px-4 bg-white border-b border-gray-200">
            <button @onclick="() => NavigateTo('/')" class="text-xl font-bold text-indigo-600 hover:text-indigo-500">
                LiftTracker
            </button>
        </div>

        <!-- Navigation -->
        <div class="flex-1 flex flex-col overflow-y-auto">
            <nav class="flex-1 px-2 py-4 space-y-1">
                @foreach (var item in GetNavigationItems())
                {
                    <button @onclick="() => NavigateTo(item.Href)"
                            class="@GetDesktopNavItemClass(item.Href) group w-full flex items-center px-2 py-2 text-sm font-medium rounded-md">
                        @((MarkupString)item.Icon)
                        <span class="ml-3">@item.Title</span>
                        @if (item.Badge.HasValue)
                        {
                            <span class="ml-auto inline-block py-0.5 px-2 text-xs font-medium rounded-full bg-indigo-100 text-indigo-600 group-hover:bg-indigo-200">
                                @item.Badge.Value
                            </span>
                        }
                    </button>
                }
            </nav>
        </div>

        <!-- User Profile Section -->
        @if (AuthService.IsAuthenticated)
        {
            <div class="flex-shrink-0 flex border-t border-gray-200 p-4">
                <div class="flex items-center w-full group">
                    <div>
                        <div class="h-9 w-9 rounded-full bg-indigo-100 flex items-center justify-center">
                            <span class="text-sm font-medium text-indigo-600">
                                @GetUserInitials()
                            </span>
                        </div>
                    </div>
                    <div class="ml-3 flex-1">
                        <p class="text-sm font-medium text-gray-700 group-hover:text-gray-900">
                            @StateService.CurrentUser?.Name
                        </p>
                        <p class="text-xs font-medium text-gray-500 group-hover:text-gray-700">
                            @StateService.CurrentUser?.Email
                        </p>
                    </div>
                    <div class="ml-3">
                        <button @onclick="ToggleUserMenu"
                                class="flex-shrink-0 p-1 rounded-full text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                            <span class="sr-only">Open user menu</span>
                            <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                            </svg>
                        </button>
                    </div>
                </div>

                @if (isUserMenuOpen)
                {
                    <div class="absolute bottom-16 right-4 w-48 bg-white rounded-md shadow-lg ring-1 ring-black ring-opacity-5">
                        <div class="py-1">
                            <button @onclick="HandleLogout"
                                    class="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                Sign out
                            </button>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    private bool isMobileMenuOpen = false;
    private bool isUserMenuOpen = false;
    private string currentPath = string.Empty;

    protected override void OnInitialized()
    {
        currentPath = NavigationManager.Uri;
        NavigationManager.LocationChanged += OnLocationChanged;
        StateService.PropertyChanged += OnStateChanged;
    }

    private void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        currentPath = e.Location;
        isMobileMenuOpen = false;
        isUserMenuOpen = false;
        StateHasChanged();
    }

    private void OnStateChanged(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(AuthService.IsAuthenticated) ||
            e.PropertyName == nameof(StateService.CurrentUser))
        {
            StateHasChanged();
        }
    }

    private void ToggleMobileMenu()
    {
        isMobileMenuOpen = !isMobileMenuOpen;
        if (isMobileMenuOpen)
        {
            isUserMenuOpen = false;
        }
    }

    private void ToggleUserMenu()
    {
        isUserMenuOpen = !isUserMenuOpen;
    }

    private void NavigateTo(string href)
    {
        NavigationManager.NavigateTo(href);
    }

    private void NavigateAndClose(string href)
    {
        isMobileMenuOpen = false;
        NavigationManager.NavigateTo(href);
    }

    private async Task HandleLogout()
    {
        isUserMenuOpen = false;
        isMobileMenuOpen = false;
        await AuthService.LogoutAsync();
        NavigationManager.NavigateTo("/login");
    }

    private List<NavigationItem> GetNavigationItems()
    {
        if (!AuthService.IsAuthenticated)
        {
            return new List<NavigationItem>();
        }

        var items = new List<NavigationItem>
        {
            new()
            {
                Title = "Dashboard",
                Href = "/",
                Icon = "<svg class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2 2v10z\" /></svg>"
            },
            new()
            {
                Title = "Workouts",
                Href = "/workouts",
                Icon = "<svg class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9.5a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z\" /></svg>",
                Badge = StateService.WorkoutSessions?.Count
            },
            new()
            {
                Title = "Exercises",
                Href = "/exercises",
                Icon = "<svg class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\" /></svg>"
            },
            new()
            {
                Title = "Progress",
                Href = "/progress",
                Icon = "<svg class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" /></svg>"
            }
        };

        return items;
    }

    private string GetMobileNavItemClass(string href)
    {
        var isActive = IsActivePath(href);
        return isActive
            ? "bg-indigo-50 border-indigo-500 text-indigo-700 border-l-4"
            : "border-transparent text-gray-600 hover:bg-gray-50 hover:border-gray-300 hover:text-gray-800 border-l-4";
    }

    private string GetDesktopNavItemClass(string href)
    {
        var isActive = IsActivePath(href);
        return isActive
            ? "bg-indigo-100 text-indigo-900"
            : "text-gray-600 hover:bg-gray-50 hover:text-gray-900";
    }

    private bool IsActivePath(string href)
    {
        var currentUri = new Uri(currentPath);
        var currentPathOnly = currentUri.AbsolutePath;

        if (href == "/" && currentPathOnly == "/")
        {
            return true;
        }

        if (href != "/" && currentPathOnly.StartsWith(href, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        return false;
    }

    private string GetUserInitials()
    {
        var user = StateService.CurrentUser;
        if (!string.IsNullOrEmpty(user?.Name))
        {
            var parts = user.Name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
            if (parts.Length >= 2)
            {
                return $"{parts[0][0]}{parts[1][0]}".ToUpper();
            }
            return user.Name[0].ToString().ToUpper();
        }
        return "U";
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
        StateService.PropertyChanged -= OnStateChanged;
    }

    private class NavigationItem
    {
        public string Title { get; set; } = string.Empty;
        public string Href { get; set; } = string.Empty;
        public string Icon { get; set; } = string.Empty;
        public int? Badge { get; set; }
    }
}
