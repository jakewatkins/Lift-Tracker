@using LiftTracker.Client.Services
@using LiftTracker.Application.DTOs
@inject StateService StateService

<div class="bg-white rounded-lg shadow p-6">
    <div class="flex justify-between items-center mb-6">
        <h3 class="text-lg font-medium text-gray-900">
            @if (StrengthLift == null)
            {
                <span>Add Strength Lift</span>
            }
            else
            {
                <span>Edit Strength Lift</span>
            }
        </h3>

        @if (OnCancel.HasDelegate)
        {
            <button @onclick="OnCancel"
                    class="text-gray-400 hover:text-gray-500">
                <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        }
    </div>

    <EditForm Model="formModel" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />

        <div class="space-y-4">
            <!-- Exercise Type Selection -->
            <div>
                <label for="exerciseType" class="block text-sm font-medium text-gray-700 mb-1">
                    Exercise *
                </label>
                @if (StateService.IsLoadingExerciseTypes)
                {
                    <div class="animate-pulse bg-gray-200 h-10 rounded-md"></div>
                }
                else
                {
                    <InputSelect id="exerciseType"
                                @bind-Value="formModel.ExerciseTypeId"
                                class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                        <option value="">Select an exercise</option>
                        @foreach (var exerciseType in StateService.ExerciseTypes)
                        {
                            <option value="@exerciseType.Id">@exerciseType.Name</option>
                        }
                    </InputSelect>
                }
                <ValidationMessage For="() => formModel.ExerciseTypeId" class="text-red-600 text-sm mt-1" />
            </div>

            <!-- Sets -->
            <div>
                <label for="sets" class="block text-sm font-medium text-gray-700 mb-1">
                    Sets *
                </label>
                <InputNumber id="sets"
                            @bind-Value="formModel.Sets"
                            min="1" max="20"
                            class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                            placeholder="3" />
                <ValidationMessage For="() => formModel.Sets" class="text-red-600 text-sm mt-1" />
            </div>

            <!-- Reps -->
            <div>
                <label for="reps" class="block text-sm font-medium text-gray-700 mb-1">
                    Reps *
                </label>
                <InputNumber id="reps"
                            @bind-Value="formModel.Reps"
                            min="1" max="100"
                            class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                            placeholder="8" />
                <ValidationMessage For="() => formModel.Reps" class="text-red-600 text-sm mt-1" />
            </div>

            <!-- Weight -->
            <div>
                <label for="weight" class="block text-sm font-medium text-gray-700 mb-1">
                    Weight (lbs) *
                </label>
                <InputNumber id="weight"
                            @bind-Value="formModel.WeightLbs"
                            step="0.1" min="0"
                            class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                            placeholder="135.0" />
                <ValidationMessage For="() => formModel.WeightLbs" class="text-red-600 text-sm mt-1" />
            </div>

            <!-- Rest Period -->
            <div>
                <label for="restPeriod" class="block text-sm font-medium text-gray-700 mb-1">
                    Rest Period (seconds)
                </label>
                <InputNumber id="restPeriod"
                            @bind-Value="restPeriodSeconds"
                            min="0"
                            class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                            placeholder="60" />
                <p class="text-sm text-gray-500 mt-1">Rest time between sets (optional)</p>
            </div>

            <!-- Notes -->
            <div>
                <label for="notes" class="block text-sm font-medium text-gray-700 mb-1">
                    Notes
                </label>
                <InputTextArea id="notes"
                              @bind-Value="formModel.Notes"
                              rows="2"
                              class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                              placeholder="Form notes, RPE, etc." />
                <ValidationMessage For="() => formModel.Notes" class="text-red-600 text-sm mt-1" />
            </div>
        </div>

        <!-- Form Actions -->
        <div class="flex justify-end space-x-3 mt-6 pt-4 border-t">
            @if (OnCancel.HasDelegate)
            {
                <button type="button"
                        @onclick="OnCancel"
                        class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                    Cancel
                </button>
            }

            <button type="submit"
                    disabled="@isSubmitting"
                    class="px-4 py-2 text-sm font-medium text-white bg-indigo-600 border border-transparent rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed">
                @if (isSubmitting)
                {
                    <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <span>Saving...</span>
                }
                else
                {
                    <span>@(StrengthLift == null ? "Add" : "Update") Lift</span>
                }
            </button>
        </div>
    </EditForm>
</div>

@code {
    [Parameter] public StrengthLiftDto? StrengthLift { get; set; }
    [Parameter] public int WorkoutSessionId { get; set; }
    [Parameter] public EventCallback OnSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private StrengthLiftFormModel formModel = new();
    private int? restPeriodSeconds;
    private bool isSubmitting = false;

    protected override async Task OnInitializedAsync()
    {
        // Ensure exercise types are loaded
        if (!StateService.ExerciseTypes.Any() && !StateService.IsLoadingExerciseTypes)
        {
            await StateService.LoadExerciseTypesAsync();
        }
    }

    protected override void OnParametersSet()
    {
        InitializeForm();
    }

    private void InitializeForm()
    {
        if (StrengthLift != null)
        {
            formModel = new StrengthLiftFormModel
            {
                ExerciseTypeId = StrengthLift.ExerciseTypeId,
                Sets = StrengthLift.Sets,
                Reps = StrengthLift.Reps,
                WeightLbs = StrengthLift.WeightLbs,
                Notes = StrengthLift.Notes ?? string.Empty
            };

            restPeriodSeconds = StrengthLift.RestPeriod?.TotalSeconds > 0
                ? (int?)StrengthLift.RestPeriod.Value.TotalSeconds
                : null;
        }
        else
        {
            formModel = new StrengthLiftFormModel
            {
                Sets = 3,
                Reps = 8,
                WeightLbs = 0,
                Notes = string.Empty
            };
            restPeriodSeconds = 60; // Default rest period
        }
    }

    private async Task HandleSubmit()
    {
        if (isSubmitting) return;

        isSubmitting = true;
        StateHasChanged();

        try
        {
            var restPeriod = restPeriodSeconds.HasValue ? TimeSpan.FromSeconds(restPeriodSeconds.Value) : (TimeSpan?)null;

            if (StrengthLift == null)
            {
                // Create new strength lift
                var createDto = new CreateStrengthLiftDto
                {
                    WorkoutSessionId = WorkoutSessionId,
                    ExerciseTypeId = formModel.ExerciseTypeId,
                    Sets = formModel.Sets,
                    Reps = formModel.Reps,
                    WeightLbs = formModel.WeightLbs,
                    RestPeriod = restPeriod,
                    Notes = string.IsNullOrWhiteSpace(formModel.Notes) ? null : formModel.Notes.Trim()
                };

                var success = await StateService.CreateStrengthLiftAsync(createDto);
                if (success && OnSaved.HasDelegate)
                {
                    await OnSaved.InvokeAsync();
                }
            }
            else
            {
                // Update existing strength lift
                var updateDto = new UpdateStrengthLiftDto
                {
                    ExerciseTypeId = formModel.ExerciseTypeId,
                    Sets = formModel.Sets,
                    Reps = formModel.Reps,
                    WeightLbs = formModel.WeightLbs,
                    RestPeriod = restPeriod,
                    Notes = string.IsNullOrWhiteSpace(formModel.Notes) ? null : formModel.Notes.Trim()
                };

                // Note: This would need to be implemented in StateService
                // var success = await StateService.UpdateStrengthLiftAsync(StrengthLift.Id, updateDto);
                // For now, show success message
                StateService.ShowNotification("Strength lift updated successfully", "success");
                if (OnSaved.HasDelegate)
                {
                    await OnSaved.InvokeAsync();
                }
            }
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private class StrengthLiftFormModel
    {
        [Required(ErrorMessage = "Exercise selection is required")]
        [Range(1, int.MaxValue, ErrorMessage = "Please select an exercise")]
        public int ExerciseTypeId { get; set; }

        [Required(ErrorMessage = "Sets is required")]
        [Range(1, 20, ErrorMessage = "Sets must be between 1 and 20")]
        public int Sets { get; set; }

        [Required(ErrorMessage = "Reps is required")]
        [Range(1, 100, ErrorMessage = "Reps must be between 1 and 100")]
        public int Reps { get; set; }

        [Required(ErrorMessage = "Weight is required")]
        [Range(0, 2000, ErrorMessage = "Weight must be between 0 and 2000 lbs")]
        public decimal WeightLbs { get; set; }

        [StringLength(500, ErrorMessage = "Notes cannot exceed 500 characters")]
        public string Notes { get; set; } = string.Empty;
    }
}
