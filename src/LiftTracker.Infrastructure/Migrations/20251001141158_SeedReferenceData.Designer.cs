// <auto-generated />
using System;
using LiftTracker.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LiftTracker.Infrastructure.Migrations
{
    [DbContext(typeof(LiftTrackerDbContext))]
    [Migration("20251001141158_SeedReferenceData")]
    partial class SeedReferenceData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LiftTracker.Domain.Entities.ExerciseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ExerciseTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Squat",
                            IsActive = true,
                            Name = "Back Squat"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Squat",
                            IsActive = true,
                            Name = "Front Squat"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Squat",
                            IsActive = true,
                            Name = "Overhead Squat"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Squat",
                            IsActive = true,
                            Name = "Box Squat"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Squat",
                            IsActive = true,
                            Name = "Goblet Squat"
                        },
                        new
                        {
                            Id = 6,
                            Category = "Deadlift",
                            IsActive = true,
                            Name = "Deadlift"
                        },
                        new
                        {
                            Id = 7,
                            Category = "Deadlift",
                            IsActive = true,
                            Name = "Sumo Deadlift"
                        },
                        new
                        {
                            Id = 8,
                            Category = "Deadlift",
                            IsActive = true,
                            Name = "Romanian Deadlift"
                        },
                        new
                        {
                            Id = 9,
                            Category = "Deadlift",
                            IsActive = true,
                            Name = "Stiff Leg Deadlift"
                        },
                        new
                        {
                            Id = 10,
                            Category = "Deadlift",
                            IsActive = true,
                            Name = "Trap Bar Deadlift"
                        },
                        new
                        {
                            Id = 11,
                            Category = "Press",
                            IsActive = true,
                            Name = "Bench Press"
                        },
                        new
                        {
                            Id = 12,
                            Category = "Press",
                            IsActive = true,
                            Name = "Overhead Press"
                        },
                        new
                        {
                            Id = 13,
                            Category = "Press",
                            IsActive = true,
                            Name = "Incline Bench Press"
                        },
                        new
                        {
                            Id = 14,
                            Category = "Press",
                            IsActive = true,
                            Name = "Dumbbell Press"
                        },
                        new
                        {
                            Id = 15,
                            Category = "Press",
                            IsActive = true,
                            Name = "Push Press"
                        },
                        new
                        {
                            Id = 16,
                            Category = "Press",
                            IsActive = true,
                            Name = "Jerk"
                        },
                        new
                        {
                            Id = 17,
                            Category = "Olympic",
                            IsActive = true,
                            Name = "Clean"
                        },
                        new
                        {
                            Id = 18,
                            Category = "Olympic",
                            IsActive = true,
                            Name = "Snatch"
                        },
                        new
                        {
                            Id = 19,
                            Category = "Olympic",
                            IsActive = true,
                            Name = "Clean and Jerk"
                        },
                        new
                        {
                            Id = 20,
                            Category = "Olympic",
                            IsActive = true,
                            Name = "Power Clean"
                        },
                        new
                        {
                            Id = 21,
                            Category = "Olympic",
                            IsActive = true,
                            Name = "Power Snatch"
                        },
                        new
                        {
                            Id = 22,
                            Category = "Row",
                            IsActive = true,
                            Name = "Bent Over Row"
                        },
                        new
                        {
                            Id = 23,
                            Category = "Row",
                            IsActive = true,
                            Name = "T-Bar Row"
                        },
                        new
                        {
                            Id = 24,
                            Category = "Row",
                            IsActive = true,
                            Name = "Seated Row"
                        },
                        new
                        {
                            Id = 25,
                            Category = "Row",
                            IsActive = true,
                            Name = "Pendlay Row"
                        },
                        new
                        {
                            Id = 26,
                            Category = "Accessory",
                            IsActive = true,
                            Name = "Pull-ups"
                        },
                        new
                        {
                            Id = 27,
                            Category = "Accessory",
                            IsActive = true,
                            Name = "Chin-ups"
                        },
                        new
                        {
                            Id = 28,
                            Category = "Accessory",
                            IsActive = true,
                            Name = "Dips"
                        },
                        new
                        {
                            Id = 29,
                            Category = "Accessory",
                            IsActive = true,
                            Name = "Lunges"
                        },
                        new
                        {
                            Id = 30,
                            Category = "Accessory",
                            IsActive = true,
                            Name = "Hip Thrust"
                        });
                });

            modelBuilder.Entity("LiftTracker.Domain.Entities.MetconMovement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Distance")
                        .HasColumnType("decimal(8,2)");

                    b.Property<Guid>("MetconWorkoutId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MovementTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("Reps")
                        .HasColumnType("int");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("MovementTypeId");

                    b.HasIndex("MetconWorkoutId", "Order")
                        .HasDatabaseName("IX_MetconMovement_MetconWorkoutId_Order");

                    b.ToTable("MetconMovements");
                });

            modelBuilder.Entity("LiftTracker.Domain.Entities.MetconType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MetconTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "As Many Rounds As Possible - Complete as many rounds of the given movements within the time limit",
                            IsActive = true,
                            Name = "AMRAP"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Complete the prescribed work as fast as possible",
                            IsActive = true,
                            Name = "For Time"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Every Minute On the Minute - Perform specified work at the start of every minute",
                            IsActive = true,
                            Name = "EMOM"
                        },
                        new
                        {
                            Id = 4,
                            Description = "20 seconds of work followed by 10 seconds of rest, repeated for 8 rounds (4 minutes)",
                            IsActive = true,
                            Name = "Tabata"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Work through a long list of exercises and repetitions in order, 'chipping away' at the work",
                            IsActive = true,
                            Name = "Chipper"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Increase or decrease reps with each round",
                            IsActive = true,
                            Name = "Ladder"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Start with 1 rep in minute 1, 2 reps in minute 2, continue until failure",
                            IsActive = true,
                            Name = "Death By"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Custom workout format not fitting standard categories",
                            IsActive = true,
                            Name = "Custom"
                        });
                });

            modelBuilder.Entity("LiftTracker.Domain.Entities.MetconWorkout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MetconTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("RoundsCompleted")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalTime")
                        .HasColumnType("decimal(6,2)");

                    b.Property<Guid>("WorkoutSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MetconTypeId");

                    b.HasIndex("WorkoutSessionId", "Order")
                        .HasDatabaseName("IX_MetconWorkout_WorkoutSessionId_Order");

                    b.ToTable("MetconWorkouts");
                });

            modelBuilder.Entity("LiftTracker.Domain.Entities.MovementType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("MeasurementType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MovementTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Bodyweight",
                            IsActive = true,
                            MeasurementType = "",
                            Name = "Burpees"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Bodyweight",
                            IsActive = true,
                            MeasurementType = "",
                            Name = "Push-ups"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Bodyweight",
                            IsActive = true,
                            MeasurementType = "",
                            Name = "Air Squats"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Bodyweight",
                            IsActive = true,
                            MeasurementType = "",
                            Name = "Mountain Climbers"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Bodyweight",
                            IsActive = true,
                            MeasurementType = "",
                            Name = "Jumping Jacks"
                        },
                        new
                        {
                            Id = 6,
                            Category = "Bodyweight",
                            IsActive = true,
                            MeasurementType = "",
                            Name = "High Knees"
                        },
                        new
                        {
                            Id = 7,
                            Category = "Bodyweight",
                            IsActive = true,
                            MeasurementType = "",
                            Name = "Butt Kickers"
                        },
                        new
                        {
                            Id = 8,
                            Category = "Bodyweight",
                            IsActive = true,
                            MeasurementType = "",
                            Name = "Plank"
                        },
                        new
                        {
                            Id = 9,
                            Category = "Bodyweight",
                            IsActive = true,
                            MeasurementType = "",
                            Name = "Sit-ups"
                        },
                        new
                        {
                            Id = 10,
                            Category = "Bodyweight",
                            IsActive = true,
                            MeasurementType = "",
                            Name = "Lunges"
                        },
                        new
                        {
                            Id = 11,
                            Category = "Cardio",
                            IsActive = true,
                            MeasurementType = "",
                            Name = "Running"
                        },
                        new
                        {
                            Id = 12,
                            Category = "Cardio",
                            IsActive = true,
                            MeasurementType = "",
                            Name = "Rowing"
                        },
                        new
                        {
                            Id = 13,
                            Category = "Cardio",
                            IsActive = true,
                            MeasurementType = "",
                            Name = "Biking"
                        },
                        new
                        {
                            Id = 14,
                            Category = "Cardio",
                            IsActive = true,
                            MeasurementType = "",
                            Name = "Jump Rope"
                        },
                        new
                        {
                            Id = 15,
                            Category = "Cardio",
                            IsActive = true,
                            MeasurementType = "",
                            Name = "Box Steps"
                        },
                        new
                        {
                            Id = 16,
                            Category = "Weighted",
                            IsActive = true,
                            MeasurementType = "",
                            Name = "Thrusters"
                        },
                        new
                        {
                            Id = 17,
                            Category = "Weighted",
                            IsActive = true,
                            MeasurementType = "",
                            Name = "Wall Balls"
                        },
                        new
                        {
                            Id = 18,
                            Category = "Weighted",
                            IsActive = true,
                            MeasurementType = "",
                            Name = "Kettlebell Swings"
                        },
                        new
                        {
                            Id = 19,
                            Category = "Weighted",
                            IsActive = true,
                            MeasurementType = "",
                            Name = "Dumbbell Snatches"
                        },
                        new
                        {
                            Id = 20,
                            Category = "Weighted",
                            IsActive = true,
                            MeasurementType = "",
                            Name = "Deadlifts"
                        },
                        new
                        {
                            Id = 21,
                            Category = "Weighted",
                            IsActive = true,
                            MeasurementType = "",
                            Name = "Box Jumps"
                        },
                        new
                        {
                            Id = 22,
                            Category = "Weighted",
                            IsActive = true,
                            MeasurementType = "",
                            Name = "Pull-ups"
                        },
                        new
                        {
                            Id = 23,
                            Category = "Weighted",
                            IsActive = true,
                            MeasurementType = "",
                            Name = "Ring Dips"
                        },
                        new
                        {
                            Id = 24,
                            Category = "Weighted",
                            IsActive = true,
                            MeasurementType = "",
                            Name = "Handstand Push-ups"
                        },
                        new
                        {
                            Id = 25,
                            Category = "Weighted",
                            IsActive = true,
                            MeasurementType = "",
                            Name = "Toes to Bar"
                        },
                        new
                        {
                            Id = 26,
                            Category = "Core",
                            IsActive = true,
                            MeasurementType = "",
                            Name = "Russian Twists"
                        },
                        new
                        {
                            Id = 27,
                            Category = "Core",
                            IsActive = true,
                            MeasurementType = "",
                            Name = "Bicycle Crunches"
                        },
                        new
                        {
                            Id = 28,
                            Category = "Core",
                            IsActive = true,
                            MeasurementType = "",
                            Name = "Dead Bugs"
                        },
                        new
                        {
                            Id = 29,
                            Category = "Core",
                            IsActive = true,
                            MeasurementType = "",
                            Name = "Bird Dogs"
                        },
                        new
                        {
                            Id = 30,
                            Category = "Core",
                            IsActive = true,
                            MeasurementType = "",
                            Name = "Hollow Holds"
                        });
                });

            modelBuilder.Entity("LiftTracker.Domain.Entities.StrengthLift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("AdditionalWeight")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Comments")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("Duration")
                        .HasColumnType("decimal(4,2)");

                    b.Property<int>("ExerciseTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("Reps")
                        .HasColumnType("int");

                    b.Property<decimal?>("RestPeriod")
                        .HasColumnType("decimal(4,2)");

                    b.Property<string>("SetStructure")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("Sets")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(5,2)");

                    b.Property<Guid>("WorkoutSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseTypeId");

                    b.HasIndex("WorkoutSessionId", "Order")
                        .HasDatabaseName("IX_StrengthLift_WorkoutSessionId_Order");

                    b.ToTable("StrengthLifts");
                });

            modelBuilder.Entity("LiftTracker.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LiftTracker.Domain.Entities.WorkoutSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Date")
                        .IsUnique()
                        .HasDatabaseName("IX_WorkoutSession_UserId_Date");

                    b.ToTable("WorkoutSessions");
                });

            modelBuilder.Entity("LiftTracker.Domain.Entities.MetconMovement", b =>
                {
                    b.HasOne("LiftTracker.Domain.Entities.MetconWorkout", "MetconWorkout")
                        .WithMany("MetconMovements")
                        .HasForeignKey("MetconWorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiftTracker.Domain.Entities.MovementType", "MovementType")
                        .WithMany("MetconMovements")
                        .HasForeignKey("MovementTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MetconWorkout");

                    b.Navigation("MovementType");
                });

            modelBuilder.Entity("LiftTracker.Domain.Entities.MetconWorkout", b =>
                {
                    b.HasOne("LiftTracker.Domain.Entities.MetconType", "MetconType")
                        .WithMany("MetconWorkouts")
                        .HasForeignKey("MetconTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LiftTracker.Domain.Entities.WorkoutSession", "WorkoutSession")
                        .WithMany("MetconWorkouts")
                        .HasForeignKey("WorkoutSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MetconType");

                    b.Navigation("WorkoutSession");
                });

            modelBuilder.Entity("LiftTracker.Domain.Entities.StrengthLift", b =>
                {
                    b.HasOne("LiftTracker.Domain.Entities.ExerciseType", "ExerciseType")
                        .WithMany("StrengthLifts")
                        .HasForeignKey("ExerciseTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LiftTracker.Domain.Entities.WorkoutSession", "WorkoutSession")
                        .WithMany("StrengthLifts")
                        .HasForeignKey("WorkoutSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExerciseType");

                    b.Navigation("WorkoutSession");
                });

            modelBuilder.Entity("LiftTracker.Domain.Entities.WorkoutSession", b =>
                {
                    b.HasOne("LiftTracker.Domain.Entities.User", "User")
                        .WithMany("WorkoutSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LiftTracker.Domain.Entities.ExerciseType", b =>
                {
                    b.Navigation("StrengthLifts");
                });

            modelBuilder.Entity("LiftTracker.Domain.Entities.MetconType", b =>
                {
                    b.Navigation("MetconWorkouts");
                });

            modelBuilder.Entity("LiftTracker.Domain.Entities.MetconWorkout", b =>
                {
                    b.Navigation("MetconMovements");
                });

            modelBuilder.Entity("LiftTracker.Domain.Entities.MovementType", b =>
                {
                    b.Navigation("MetconMovements");
                });

            modelBuilder.Entity("LiftTracker.Domain.Entities.User", b =>
                {
                    b.Navigation("WorkoutSessions");
                });

            modelBuilder.Entity("LiftTracker.Domain.Entities.WorkoutSession", b =>
                {
                    b.Navigation("MetconWorkouts");

                    b.Navigation("StrengthLifts");
                });
#pragma warning restore 612, 618
        }
    }
}
