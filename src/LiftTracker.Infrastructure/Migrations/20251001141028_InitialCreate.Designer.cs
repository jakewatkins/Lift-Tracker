// <auto-generated />
using System;
using LiftTracker.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LiftTracker.Infrastructure.Migrations
{
    [DbContext(typeof(LiftTrackerDbContext))]
    [Migration("20251001141028_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LiftTracker.Domain.Entities.ExerciseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ExerciseTypes");
                });

            modelBuilder.Entity("LiftTracker.Domain.Entities.MetconMovement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Distance")
                        .HasColumnType("decimal(8,2)");

                    b.Property<Guid>("MetconWorkoutId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MovementTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("Reps")
                        .HasColumnType("int");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("MovementTypeId");

                    b.HasIndex("MetconWorkoutId", "Order")
                        .HasDatabaseName("IX_MetconMovement_MetconWorkoutId_Order");

                    b.ToTable("MetconMovements");
                });

            modelBuilder.Entity("LiftTracker.Domain.Entities.MetconType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MetconTypes");
                });

            modelBuilder.Entity("LiftTracker.Domain.Entities.MetconWorkout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MetconTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("RoundsCompleted")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalTime")
                        .HasColumnType("decimal(6,2)");

                    b.Property<Guid>("WorkoutSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MetconTypeId");

                    b.HasIndex("WorkoutSessionId", "Order")
                        .HasDatabaseName("IX_MetconWorkout_WorkoutSessionId_Order");

                    b.ToTable("MetconWorkouts");
                });

            modelBuilder.Entity("LiftTracker.Domain.Entities.MovementType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("MeasurementType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MovementTypes");
                });

            modelBuilder.Entity("LiftTracker.Domain.Entities.StrengthLift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("AdditionalWeight")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Comments")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("Duration")
                        .HasColumnType("decimal(4,2)");

                    b.Property<int>("ExerciseTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("Reps")
                        .HasColumnType("int");

                    b.Property<decimal?>("RestPeriod")
                        .HasColumnType("decimal(4,2)");

                    b.Property<string>("SetStructure")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("Sets")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(5,2)");

                    b.Property<Guid>("WorkoutSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseTypeId");

                    b.HasIndex("WorkoutSessionId", "Order")
                        .HasDatabaseName("IX_StrengthLift_WorkoutSessionId_Order");

                    b.ToTable("StrengthLifts");
                });

            modelBuilder.Entity("LiftTracker.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LiftTracker.Domain.Entities.WorkoutSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Date")
                        .IsUnique()
                        .HasDatabaseName("IX_WorkoutSession_UserId_Date");

                    b.ToTable("WorkoutSessions");
                });

            modelBuilder.Entity("LiftTracker.Domain.Entities.MetconMovement", b =>
                {
                    b.HasOne("LiftTracker.Domain.Entities.MetconWorkout", "MetconWorkout")
                        .WithMany("MetconMovements")
                        .HasForeignKey("MetconWorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiftTracker.Domain.Entities.MovementType", "MovementType")
                        .WithMany("MetconMovements")
                        .HasForeignKey("MovementTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MetconWorkout");

                    b.Navigation("MovementType");
                });

            modelBuilder.Entity("LiftTracker.Domain.Entities.MetconWorkout", b =>
                {
                    b.HasOne("LiftTracker.Domain.Entities.MetconType", "MetconType")
                        .WithMany("MetconWorkouts")
                        .HasForeignKey("MetconTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LiftTracker.Domain.Entities.WorkoutSession", "WorkoutSession")
                        .WithMany("MetconWorkouts")
                        .HasForeignKey("WorkoutSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MetconType");

                    b.Navigation("WorkoutSession");
                });

            modelBuilder.Entity("LiftTracker.Domain.Entities.StrengthLift", b =>
                {
                    b.HasOne("LiftTracker.Domain.Entities.ExerciseType", "ExerciseType")
                        .WithMany("StrengthLifts")
                        .HasForeignKey("ExerciseTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LiftTracker.Domain.Entities.WorkoutSession", "WorkoutSession")
                        .WithMany("StrengthLifts")
                        .HasForeignKey("WorkoutSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExerciseType");

                    b.Navigation("WorkoutSession");
                });

            modelBuilder.Entity("LiftTracker.Domain.Entities.WorkoutSession", b =>
                {
                    b.HasOne("LiftTracker.Domain.Entities.User", "User")
                        .WithMany("WorkoutSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LiftTracker.Domain.Entities.ExerciseType", b =>
                {
                    b.Navigation("StrengthLifts");
                });

            modelBuilder.Entity("LiftTracker.Domain.Entities.MetconType", b =>
                {
                    b.Navigation("MetconWorkouts");
                });

            modelBuilder.Entity("LiftTracker.Domain.Entities.MetconWorkout", b =>
                {
                    b.Navigation("MetconMovements");
                });

            modelBuilder.Entity("LiftTracker.Domain.Entities.MovementType", b =>
                {
                    b.Navigation("MetconMovements");
                });

            modelBuilder.Entity("LiftTracker.Domain.Entities.User", b =>
                {
                    b.Navigation("WorkoutSessions");
                });

            modelBuilder.Entity("LiftTracker.Domain.Entities.WorkoutSession", b =>
                {
                    b.Navigation("MetconWorkouts");

                    b.Navigation("StrengthLifts");
                });
#pragma warning restore 612, 618
        }
    }
}
